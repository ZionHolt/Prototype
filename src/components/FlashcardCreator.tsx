import React, { useState } from 'react';
import { Button } from './ui/button';
import { Card, CardContent, CardHeader, CardTitle } from './ui/card';
import { Input } from './ui/input';
import { Badge } from './ui/badge';
import { Upload, Sparkles, Save, Trash2 } from 'lucide-react';

interface Flashcard {
  id: string;
  front: string;
  back: string;
  difficulty: 'Easy' | 'Medium' | 'Hard';
}

interface FlashcardCreatorProps {
  onSaveFlashcards: (cards: Flashcard[], deckName: string) => void;
}

export function FlashcardCreator({ onSaveFlashcards }: FlashcardCreatorProps) {
  const [deckName, setDeckName] = useState('');
  const [generatedCards, setGeneratedCards] = useState<Flashcard[]>([]);
  const [isGenerating, setIsGenerating] = useState(false);

  const handleGenerate = async () => {
    setIsGenerating(true);
    
    // Simulate AI generation
    setTimeout(() => {
      const mockCards: Flashcard[] = [
        {
          id: '1',
          front: 'What is the main concept?',
          back: 'This is a sample answer generated by AI.',
          difficulty: 'Medium'
        },
        {
          id: '2',
          front: 'How does this concept work?',
          back: 'This is another sample answer.',
          difficulty: 'Easy'
        }
      ];
      
      setGeneratedCards(mockCards);
      setDeckName('Sample Deck');
      setIsGenerating(false);
    }, 2000);
  };

  const deleteCard = (id: string) => {
    setGeneratedCards(cards => cards.filter(card => card.id !== id));
  };

  const getDifficultyColor = (difficulty: string) => {
    switch (difficulty) {
      case 'Easy': return 'bg-green-100 text-green-700';
      case 'Medium': return 'bg-yellow-100 text-yellow-700';
      case 'Hard': return 'bg-red-100 text-red-700';
      default: return 'bg-gray-100 text-gray-700';
    }
  };

  return (
    <div className="max-w-4xl mx-auto p-6 space-y-6">
      <div className="text-center">
        <h1 className="text-3xl font-semibold mb-2">AI Flashcard Generator</h1>
        <p className="text-gray-600">Upload materials and generate flashcards</p>
      </div>

      <Card>
        <CardHeader>
          <CardTitle>Upload Course Materials</CardTitle>
        </CardHeader>
        <CardContent>
          <div className="border-2 border-dashed border-gray-300 rounded-lg p-8 text-center">
            <Upload className="w-12 h-12 text-gray-400 mx-auto mb-4" />
            <p className="text-lg font-medium mb-2">Drop files here or click to upload</p>
            <p className="text-sm text-gray-500">PDF, DOC, TXT files supported</p>
          </div>
          
          <div className="mt-6">
            <Button 
              onClick={handleGenerate}
              disabled={isGenerating}
              className="w-full bg-blue-600 hover:bg-blue-700"
            >
              {isGenerating ? (
                <>
                  <Sparkles className="w-4 h-4 mr-2 animate-pulse" />
                  Generating...
                </>
              ) : (
                <>
                  <Sparkles className="w-4 h-4 mr-2" />
                  Generate Flashcards
                </>
              )}
            </Button>
          </div>
        </CardContent>
      </Card>

      {generatedCards.length > 0 && (
        <div className="space-y-4">
          <div className="flex items-center justify-between">
            <h2 className="text-xl font-semibold">Generated Flashcards ({generatedCards.length})</h2>
            <div className="flex gap-3">
              <Input
                placeholder="Deck name..."
                value={deckName}
                onChange={(e) => setDeckName(e.target.value)}
                className="w-48"
              />
              <Button 
                onClick={() => onSaveFlashcards(generatedCards, deckName)}
                disabled={!deckName.trim()}
                className="bg-green-600 hover:bg-green-700"
              >
                <Save className="w-4 h-4 mr-2" />
                Save Deck
              </Button>
            </div>
          </div>

          <div className="space-y-4">
            {generatedCards.map((card) => (
              <Card key={card.id}>
                <CardContent className="p-4">
                  <div className="flex items-start justify-between mb-3">
                    <Badge className={getDifficultyColor(card.difficulty)}>
                      {card.difficulty}
                    </Badge>
                    <Button
                      variant="ghost"
                      size="sm"
                      onClick={() => deleteCard(card.id)}
                      className="text-red-600"
                    >
                      <Trash2 className="w-4 h-4" />
                    </Button>
                  </div>

                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <div>
                      <label className="text-sm font-medium text-gray-700 block mb-1">
                        Front (Question)
                      </label>
                      <div className="p-3 bg-blue-50 border border-blue-200 rounded-lg">
                        <p className="text-sm text-blue-900">{card.front}</p>
                      </div>
                    </div>

                    <div>
                      <label className="text-sm font-medium text-gray-700 block mb-1">
                        Back (Answer)
                      </label>
                      <div className="p-3 bg-green-50 border border-green-200 rounded-lg">
                        <p className="text-sm text-green-900">{card.back}</p>
                      </div>
                    </div>
                  </div>
                </CardContent>
              </Card>
            ))}
          </div>
        </div>
      )}
    </div>
  );
}